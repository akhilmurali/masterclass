{"version":3,"sources":["../src/index.js"],"names":["payloadString","console","log","path","resolve","httpsOptions","fs","readFileSync","unifiedServer","req","res","parsedUrl","url","parse","pathname","trimmedPath","replace","method","toUpperCase","headers","routeHandler","router","handlers","notFound","data","statusCode","payload","JSON","stringify","setHeader","writeHead","end","hello","callback","message","httpServer","http","createServer","httpsServer","https","listen","config","httpPort","httpsPort"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,sBAAJ;;AAEAC,QAAQC,GAAR,CAAYC,eAAKC,OAAL,CAAa,iBAAb,CAAZ;AACAH,QAAQC,GAAR,CAAYC,eAAKC,OAAL,CAAa,kBAAb,CAAZ;AACA,IAAIC,eAAe;AACf,WAAQC,aAAGC,YAAH,CAAgBJ,eAAKC,OAAL,CAAa,iBAAb,CAAhB,CADO;AAEf,YAAQE,aAAGC,YAAH,CAAgBJ,eAAKC,OAAL,CAAa,kBAAb,CAAhB;AAFO,CAAnB;;AAMA,IAAII,gBAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC9B,QAAIC,YAAYC,cAAIC,KAAJ,CAAUJ,IAAIG,GAAd,EAAmB,IAAnB,CAAhB;AACA,QAAIT,OAAOQ,UAAUG,QAArB;AACA,QAAIC,cAAcZ,KAAKa,OAAL,CAAa,YAAb,EAA2B,EAA3B,CAAlB;AACA,QAAIC,SAASR,IAAIQ,MAAJ,CAAWC,WAAX,EAAb;AACA,QAAIC,UAAUV,IAAIU,OAAlB;AACA,QAAIC,eAAe,OAAQC,OAAON,WAAP,CAAR,KAAiC,WAAjC,GAA+CM,OAAON,WAAP,CAA/C,GAAqEO,SAASC,QAAjG;AACA,QAAIC,OAAO;AACP,wBAAgBT,WADT;AAEP,mBAAWI,OAFJ;AAGP,kBAAUF;AAHH,KAAX;AAKAG,iBAAaI,IAAb,EAAmB,UAACC,UAAD,EAAaC,OAAb,EAAyB;AACxCD,qBAAa,OAAQA,UAAR,IAAuB,QAAvB,GAAkCA,UAAlC,GAA+C,GAA5D;AACAC,kBAAU,QAAQA,OAAR,yCAAQA,OAAR,MAAoB,QAApB,GAA+BA,OAA/B,GAAyC,EAAnD;AACA1B,wBAAgB2B,KAAKC,SAAL,CAAeF,OAAf,CAAhB;AACAhB,YAAImB,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAnB,YAAIoB,SAAJ,CAAcL,UAAd;AACAf,YAAIqB,GAAJ,CAAQ/B,aAAR;AACH,KAPD;AAQH,CApBD;;AAsBA,IAAIsB,WAAW;AACXU,WAAO,eAACR,IAAD,EAAOS,QAAP,EAAoB;AACvBT,aAAKU,OAAL,GAAe,wBAAf;AACAD,iBAAS,GAAT,EAAcT,IAAd;AACH,KAJU;AAKXD,cAAU,kBAACC,IAAD,EAAOS,QAAP,EAAoB;AAC1BT,aAAKU,OAAL,GAAe,uBAAf;AACAD,iBAAS,GAAT,EAAcT,IAAd;AACH;AARU,CAAf;;AAWA,IAAIH,SAAS;AACTW,WAAOV,SAASU;AADP,CAAb;;AAIA,IAAIG,aAAaC,eAAKC,YAAL,CAAkB,UAAC5B,GAAD,EAAMC,GAAN,EAAc;AAC7CF,kBAAcC,GAAd,EAAmBC,GAAnB;AACH,CAFgB,CAAjB;;AAIA,IAAI4B,cAAcC,gBAAMF,YAAN,CAAmBhC,YAAnB,EAAiC,UAACI,GAAD,EAAMC,GAAN,EAAc;AAC7DF,kBAAcC,GAAd,EAAmBC,GAAnB;AACH,CAFiB,CAAlB;;AAIAyB,WAAWK,MAAX,CAAkBC,iBAAOC,QAAzB,EAAmC,YAAM;AACrCzC,YAAQC,GAAR,CAAY,8BAA8BuC,iBAAOC,QAAjD;AACH,CAFD;;AAIAJ,YAAYE,MAAZ,CAAmBC,iBAAOE,SAA1B,EAAqC,YAAM;AACvC1C,YAAQC,GAAR,CAAY,oCAAoCuC,iBAAOE,SAAvD;AACH,CAFD","file":"index.js","sourcesContent":["import http from 'http';\nimport url from 'url';\nimport https from 'https';\nimport config from './config';\nimport fs from 'fs';\nimport path from 'path';\n\nlet payloadString;\n\nconsole.log(path.resolve('./https/key.pem'));\nconsole.log(path.resolve('./https/cert.pem'));\nlet httpsOptions = {\n    'key' : fs.readFileSync(path.resolve('./https/key.pem')),\n    'cert': fs.readFileSync(path.resolve('./https/cert.pem'))\n}\n\n\nlet unifiedServer = (req, res) => {\n    let parsedUrl = url.parse(req.url, true);\n    let path = parsedUrl.pathname;\n    let trimmedPath = path.replace(/^\\/+|\\/+$/g, '');\n    let method = req.method.toUpperCase();\n    let headers = req.headers;\n    var routeHandler = typeof (router[trimmedPath]) !== 'undefined' ? router[trimmedPath] : handlers.notFound;\n    let data = {\n        'trimmed_path': trimmedPath,\n        'headers': headers,\n        'method': method,\n    }\n    routeHandler(data, (statusCode, payload) => {\n        statusCode = typeof (statusCode) == 'number' ? statusCode : 200;\n        payload = typeof (payload) == 'object' ? payload : {};\n        payloadString = JSON.stringify(payload);\n        res.setHeader('Content-Type', 'application/json');\n        res.writeHead(statusCode);\n        res.end(payloadString);\n    });\n}\n\nlet handlers = {\n    hello: (data, callback) => {\n        data.message = 'Welcome to the webpage';\n        callback(200, data);\n    },\n    notFound: (data, callback) => {\n        data.message = 'Sorry, page not found';\n        callback(404, data);\n    }\n};\n\nlet router = {\n    hello: handlers.hello\n};\n\nlet httpServer = http.createServer((req, res) => {\n    unifiedServer(req, res);\n});\n\nlet httpsServer = https.createServer(httpsOptions, (req, res) => {\n    unifiedServer(req, res);\n});\n\nhttpServer.listen(config.httpPort, () => {\n    console.log('Server listening on port ' + config.httpPort);\n});\n\nhttpsServer.listen(config.httpsPort, () => {\n    console.log('HTTPS server listening on port ' + config.httpsPort);\n});\n"]}